// ==================== –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é ====================
const mobileMenuBtn = document.getElementById('mobileMenuBtn');
const navMenu = document.querySelector('.nav-menu');

if (mobileMenuBtn) {
    mobileMenuBtn.addEventListener('click', () => {
        navMenu.classList.toggle('active');
        mobileMenuBtn.classList.toggle('active');
    });
}

// ==================== –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ ====================
const trackingBtn = document.getElementById('trackingBtn');
const trackingInput = document.getElementById('trackingInput');
const trackingEmpty = document.getElementById('trackingEmpty');
const trackingResult = document.getElementById('trackingResult');

if (trackingBtn && trackingInput) {
    trackingBtn.addEventListener('click', () => {
        const trackingNumber = trackingInput.value.trim();
        
        if (trackingNumber) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            if (trackingEmpty) trackingEmpty.style.display = 'none';
            if (trackingResult) trackingResult.style.display = 'block';
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            trackingResult.style.opacity = '0';
            setTimeout(() => {
                trackingResult.style.opacity = '1';
                trackingResult.style.transition = 'opacity 0.5s ease';
            }, 100);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∏—Å–∫–µ
            if (typeof ymaps !== 'undefined' && !window.__ymapInited) {
                ymaps.ready(initYMap);
            }
        } else {
            showModal({
                type: 'error',
                title: '–ù—É–∂–µ–Ω –Ω–æ–º–µ—Ä',
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.'
            });
        }
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é Enter
    trackingInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            trackingBtn.click();
        }
    });
}

// ==================== –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞ ====================
function initYMap() {
    const mapContainer = document.getElementById('yandexMap');
    if (!mapContainer) return;

    // –ú–∏–Ω—Å–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const startCoords = [53.902284, 27.561831];
    const endCoords = [53.907, 27.58];

    const map = new ymaps.Map('yandexMap', {
        center: startCoords,
        zoom: 12,
        controls: ['zoomControl', 'geolocationControl']
    });

    // –ú–µ—Ç–∫–∏
    const startPlacemark = new ymaps.Placemark(startCoords, {
        balloonContent: '–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
    }, {
        preset: 'islands#redDotIcon'
    });

    const endPlacemark = new ymaps.Placemark(endCoords, {
        balloonContent: '–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'
    }, {
        preset: 'islands#blueDotIcon'
    });

    map.geoObjects.add(startPlacemark).add(endPlacemark);

    // –ú–∞—Ä—à—Ä—É—Ç
    ymaps.route([startCoords, endCoords]).then(function(route) {
        route.getPaths().options.set({
            strokeColor: '#0066FF',
            opacity: 0.9,
            strokeWidth: 4
        });
        map.geoObjects.add(route);
        map.setBounds(route.getBounds(), { checkZoomRange: true, zoomMargin: 40 });
    });

    window.__ymapInited = true;
}

// ==================== –ê–∫–∫–∞—É–Ω—Ç: –≤–∫–ª–∞–¥–∫–∏ ====================
const authTabs = document.querySelectorAll('.auth-tab');
const loginForm = document.getElementById('loginForm');
const registerForm = document.getElementById('registerForm');
const resetForm = document.getElementById('resetForm');

authTabs.forEach(tab => {
    tab.addEventListener('click', () => {
        authTabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        const key = tab.getAttribute('data-auth-tab');
        loginForm.style.display = key === 'login' ? 'flex' : 'none';
        registerForm.style.display = key === 'register' ? 'flex' : 'none';
        resetForm.style.display = key === 'reset' ? 'flex' : 'none';
    });
});

// ==================== –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–æ–ª—è ====================
document.querySelectorAll('.password-toggle').forEach(btn => {
    btn.addEventListener('click', () => {
        const targetId = btn.getAttribute('data-target');
        const input = document.getElementById(targetId);
        if (!input) return;
        const isPass = input.type === 'password';
        input.type = isPass ? 'text' : 'password';
        btn.textContent = isPass ? 'üôà' : 'üëÅ';
    });
});

// ==================== –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–¥–µ–º–æ) ====================
const storageKey = 'postgo_users_v1';
function getUsers(){ try { return JSON.parse(localStorage.getItem(storageKey)) || []; } catch { return []; } }
function setUsers(users){ localStorage.setItem(storageKey, JSON.stringify(users)); }
function findUserByPhone(phone){ return getUsers().find(u => u.phone === phone); }

// ==================== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ====================
if (registerForm) {
    registerForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const name = document.getElementById('regName').value.trim();
        const phone = document.getElementById('regPhone').value.trim();
        const password = document.getElementById('regPassword').value;
        const confirm = document.getElementById('regConfirm').value;

        if (!name || !phone || !password || !confirm) {
            showModal({ type: 'error', title: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.' });
            return;
        }
        if (password.length < 6) {
            showModal({ type: 'warning', title: '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å', message: '–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.' });
            return;
        }
        if (password !== confirm) {
            showModal({ type: 'error', title: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', message: '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è.' });
            return;
        }
        if (findUserByPhone(phone)) {
            showModal({ type: 'warning', title: '–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –µ—Å—Ç—å', message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.' });
            return;
        }

        const users = getUsers();
        users.push({ name, phone, password });
        setUsers(users);

        showModal({
            type: 'success',
            title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
            message: `${name}, –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏.`,
            actions: [{ label: '–í–æ–π—Ç–∏', variant: 'primary', handler: () => {
                document.querySelector('[data-auth-tab="login"]').click();
                document.getElementById('loginPhone').value = phone;
            }}]
        });
    });
}

// ==================== –í—Ö–æ–¥ ====================
if (loginForm) {
    loginForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const phone = document.getElementById('loginPhone').value.trim();
        const password = document.getElementById('loginPassword').value;

        if (!phone || !password) {
            showModal({ type: 'error', title: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', message: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–∞—Ä–æ–ª—å.' });
            return;
        }
        const user = findUserByPhone(phone);
        if (!user || user.password !== password) {
            showModal({ type: 'error', title: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–∞—Ä–æ–ª—å.' });
            return;
        }

        localStorage.setItem('postgo_session_user', JSON.stringify({ name: user.name, phone: user.phone }));
        showModal({ type: 'success', title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', message: `${user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏.`, actions: [{ label: '–í –∫–∞–±–∏–Ω–µ—Ç', variant: 'primary', handler: () => window.location.href = 'account.html' }] });
    });
}

// ==================== –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–¥–µ–º–æ) ====================
if (resetForm) {
    resetForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const phone = document.getElementById('resetPhone').value.trim();
        if (!phone) {
            showModal({ type: 'error', title: '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', message: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.' });
            return;
        }
        const user = findUserByPhone(phone);
        if (!user) {
            showModal({ type: 'warning', title: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.' });
            return;
        }

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: "–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥"
        const code = Math.floor(100000 + Math.random() * 900000);
        sessionStorage.setItem('postgo_reset_code', String(code));
        showModal({
            type: 'info',
            title: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            message: `–ö–æ–¥ –¥–ª—è ${phone}: <b>${code}</b>. –ù–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\" –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è.`,
            actions: [
                { label: '–û—Ç–º–µ–Ω–∞', variant: 'outline' },
                { label: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', variant: 'primary', handler: () => promptNewPassword(phone) }
            ]
        });
    });
}

function promptNewPassword(phone) {
    const wrapper = document.createElement('div');
    wrapper.innerHTML = `
        <div class="form-group" style="margin-top:10px;">
            <label class="form-label">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
            <input type="password" id="__newPass" class="form-input" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" />
        </div>
        <div class="form-group" style="margin-top:10px;">
            <label class="form-label">–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
            <input type="password" id="__newPass2" class="form-input" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" />
        </div>
    `;

    showModal({
        type: 'info',
        title: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è',
        message: wrapper.innerHTML,
        actions: [
            { label: '–û—Ç–º–µ–Ω–∞', variant: 'outline' },
            { label: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', variant: 'primary', handler: () => {
                const p1 = document.getElementById('__newPass').value;
                const p2 = document.getElementById('__newPass2').value;
                if (!p1 || !p2) { showModal({ type: 'error', title: '–û—à–∏–±–∫–∞', message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è.' }); return; }
                if (p1.length < 6) { showModal({ type: 'warning', title: '–ö–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å', message: '–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.' }); return; }
                if (p1 !== p2) { showModal({ type: 'error', title: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', message: '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.' }); return; }

                const users = getUsers().map(u => u.phone === phone ? { ...u, password: p1 } : u);
                setUsers(users);
                showModal({ type: 'success', title: '–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω', message: '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.', actions: [{ label: '–í–æ–π—Ç–∏', variant: 'primary', handler: () => document.querySelector('[data-auth-tab="login"]').click() }] });
            }}
        ]
    });
}

// ==================== –ú–∞—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +375(xx)xxx-xx-xx ====================
function formatBYPhone(value){
    // –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    const digits = value.replace(/\D/g, '');
    // –Ω–∞—á–∏–Ω–∞–µ–º —Å 375
    let res = '+375(';
    // –æ–∂–∏–¥–∞–µ–º: 2 —Ü–∏—Ñ—Ä—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, 3, 2, 2
    const a = digits.slice(3,5); // –∫–æ–¥ –ø–æ—Å–ª–µ 375
    const b = digits.slice(5,8);
    const c = digits.slice(8,10);
    const d = digits.slice(10,12);
    if (digits.startsWith('375')) {
        if (a) res += a;
        if (a.length >= 2) res += ')';
        else return res;
        if (b) res += b;
        if (b.length >= 3) res += '-';
        else return res;
        if (c) res += c;
        if (c.length >= 2) res += '-';
        else return res;
        if (d) res += d;
        return res;
    } else {
        // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —Å 375 ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const num = digits.replace(/^375?/, '');
        const op = num.slice(0,2);
        const p1 = num.slice(2,5);
        const p2 = num.slice(5,7);
        const p3 = num.slice(7,9);
        res += op;
        if (op.length >= 2) res += ')';
        if (p1) res += p1;
        if (p1.length >= 3) res += '-';
        if (p2) res += p2;
        if (p2.length >= 2) res += '-';
        if (p3) res += p3;
        return res;
    }
}

document.querySelectorAll('.phone-input').forEach((input) => {
    input.placeholder = '+375(xx)xxx-xx-xx';
    input.addEventListener('input', (e) => {
        const pos = e.target.selectionStart;
        e.target.value = formatBYPhone(e.target.value);
        // —É–ø—Ä–æ—â–µ–Ω–Ω–æ: —Å—Ç–∞–≤–∏–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü
        e.target.setSelectionRange(e.target.value.length, e.target.value.length);
    });
    input.addEventListener('focus', (e) => {
        if (!e.target.value) e.target.value = '+375(';
    });
    input.addEventListener('blur', (e) => {
        if (e.target.value === '+375(') e.target.value = '';
    });
});

// ==================== LocalDB –∑–∞–∫–∞–∑–æ–≤ ====================
const ordersKey = 'postgo_orders_v1';
function getAllOrders(){ try { return JSON.parse(localStorage.getItem(ordersKey)) || []; } catch { return []; } }
function setAllOrders(orders){ localStorage.setItem(ordersKey, JSON.stringify(orders)); }
function getSessionUser(){ try { return JSON.parse(localStorage.getItem('postgo_session_user')); } catch { return null; } }
function generateOrderId(){ return 'ORD-' + Date.now().toString(36).toUpperCase(); }
function calcOrderPrice({ deliveryType, weight, volume }){
    const base = deliveryType?.toLowerCase().includes('—ç–∫—Å–ø—Ä–µ—Å—Å') ? 350 : deliveryType?.toLowerCase().includes('–≥—Ä—É–∑—á–∏–∫–∞–º–∏') ? 300 : 250;
    const weightFee = Math.max(0, (Number(weight)||0) * 0.8);
    const volumeFee = Math.max(0, (Number(volume)||0) * 25);
    return Math.round(base + weightFee + volumeFee);
}
function saveOrder(order){ const all = getAllOrders(); all.push(order); setAllOrders(all); }

// ==================== –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ ====================
const orderForm = document.getElementById('orderForm');

if (orderForm) {
    orderForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const cargoType = document.getElementById('cargoType').value;
        const weight = document.getElementById('weight').value;
        const volume = document.getElementById('volume').value;
        const deliveryDate = document.getElementById('deliveryDate').value;
        
        if (!cargoType || !weight || !volume || !deliveryDate) {
            showModal({ type: 'error', title: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.' });
            return;
        }
        
        const deliveryType = (document.getElementById('deliveryType')?.value || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞');
        const trackingNumber = 'TRK-' + Math.floor(Math.random() * 10000) + '-' + Math.random().toString(36).substring(2, 6).toUpperCase();
        const sessionUser = getSessionUser();
        const price = calcOrderPrice({ deliveryType, weight, volume });
        const order = {
            id: generateOrderId(),
            createdAt: new Date().toISOString(),
            userPhone: sessionUser?.phone || 'guest',
            userName: sessionUser?.name || '–ì–æ—Å—Ç—å',
            deliveryType,
            cargoType,
            weight: Number(weight),
            volume: Number(volume),
            deliveryDate,
            trackingNumber,
            price,
            status: '–ù–æ–≤—ã–π'
        };
        saveOrder(order);

        showModal({ type: 'success', title: '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω', message: `–¢—Ä–µ–∫‚Äë–Ω–æ–º–µ—Ä: <b>${trackingNumber}</b><br>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>${price} BYN</b>`, actions: [
            { label: '–û–ø–ª–∞—Ç–∏—Ç—å', variant: 'primary', handler: () => openPaymentModal(order.id) },
            { label: '–ö —Ç—Ä–µ–∫–∏–Ω–≥—É', variant: 'outline', handler: () => window.location.href = 'tracking.html' }
        ]});
    });
}

// ==================== –¢–∞–±—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞ ====================
const orderTabs = document.querySelectorAll('.order-tab');

orderTabs.forEach(tab => {
    tab.addEventListener('click', () => {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤
        orderTabs.forEach(t => t.classList.remove('active'));
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–∞–±—É
        tab.classList.add('active');
        
        const tabName = tab.getAttribute('data-tab');
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (tabName === 'calculator') {
            showModal({ type: 'info', title: '–°–∫–æ—Ä–æ', message: '–§—É–Ω–∫—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.' });
        }
    });
});

// ==================== –§–∏–ª—å—Ç—Ä—ã —É—Å–ª—É–≥ ====================
const filterTabs = document.querySelectorAll('.filter-tab');
const serviceCards = document.querySelectorAll('.service-card');

filterTabs.forEach(tab => {
    tab.addEventListener('click', () => {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filterTabs.forEach(t => t.classList.remove('active'));
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É
        tab.classList.add('active');
        
        const filterText = tab.textContent.toLowerCase();
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
        serviceCards.forEach(card => {
            if (filterText === '–≤—Å–µ') {
                card.style.display = 'flex';
            } else {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                card.style.display = 'flex';
            }
        });
    });
});

// ==================== –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ ====================
const deliveryOptions = document.querySelectorAll('.delivery-option button, .delivery-option-card button');

deliveryOptions.forEach((button, index) => {
    button.addEventListener('click', () => {
        const deliveryCard = button.closest('.delivery-option, .delivery-option-card');
        const deliveryTitle = deliveryCard.querySelector('h3').textContent;
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É –≤—Å–µ—Ö –æ–ø—Ü–∏–π
        deliveryOptions.forEach(btn => {
            btn.textContent = '–í—ã–±—Ä–∞—Ç—å';
            btn.classList.remove('btn-primary');
            btn.classList.add('btn-outline');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
        button.textContent = '–í—ã–±—Ä–∞–Ω–æ';
        button.classList.remove('btn-outline');
        button.classList.add('btn-primary');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏" –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞
        const deliveryTypeInput = document.getElementById('deliveryType');
        if (deliveryTypeInput) {
            deliveryTypeInput.value = deliveryTitle;
        }
    });
});

// ==================== –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ ====================
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -100px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
        }
    });
}, observerOptions);

// –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å–ª—É–≥
document.querySelectorAll('.service-card, .hero-card, .delivery-option, .delivery-option-card').forEach(card => {
    card.style.opacity = '0';
    card.style.transform = 'translateY(30px)';
    card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
    observer.observe(card);
});

// ==================== –ü–æ–∏—Å–∫ —É—Å–ª—É–≥ ====================
const searchInputs = document.querySelectorAll('.search-input');

searchInputs.forEach(searchInput => {
    searchInput.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();
        
        serviceCards.forEach(card => {
            const title = card.querySelector('.service-title').textContent.toLowerCase();
            const description = card.querySelector('.service-description').textContent.toLowerCase();
            
            if (title.includes(searchTerm) || description.includes(searchTerm)) {
                card.style.display = 'flex';
            } else {
                card.style.display = 'none';
            }
        });
    });
});

// ==================== –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –¥–ª—è —è–∫–æ—Ä–µ–π ====================
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// ==================== –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ====================
const phoneInput = document.getElementById('phone');

if (phoneInput) {
    phoneInput.addEventListener('input', (e) => {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã +, -, (, )
        e.target.value = e.target.value.replace(/[^\d\+\-\(\)\s]/g, '');
    });
}

// ==================== –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º ====================
const deliveryDateInput = document.getElementById('deliveryDate');

if (deliveryDateInput) {
    const today = new Date().toISOString().split('T')[0];
    deliveryDateInput.setAttribute('min', today);
}

// ==================== –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ====================
const trackingExampleInput = document.querySelector('.tracking-example-input');

if (trackingExampleInput) {
    trackingExampleInput.addEventListener('click', () => {
        if (trackingInput) {
            trackingInput.value = trackingExampleInput.placeholder.replace('–ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞: ', '');
            trackingInput.focus();
        }
    });
}

// ==================== Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ====================
let deferredPrompt;
let notificationPermission = 'default';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function isNotificationSupported() {
    return 'Notification' in window && 'serviceWorker' in navigator && 'PushManager' in window;
}

// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function requestNotificationPermission() {
    if (!isNotificationSupported()) {
        console.log('Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
        return false;
    }

    try {
        const permission = await Notification.requestPermission();
        notificationPermission = permission;
        
        if (permission === 'granted') {
            console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
            await subscribeToPush();
            return true;
        } else {
            console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
            return false;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error);
        return false;
    }
}

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function subscribeToPush() {
    try {
        const registration = await navigator.serviceWorker.ready;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        let subscription = await registration.pushManager.getSubscription();
        
        if (!subscription) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await registration.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: urlBase64ToUint8Array('BEl62iUYgUivxIkv69yViEuiBIa40HI8YF5jxaKMrN8j8KwkbWjMCZuBcizM3M8bL0y8j2olEkeua5mA_0o8M1k')
            });
        }
        
        console.log('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', subscription);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ localStorage –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        localStorage.setItem('postgo_push_subscription', JSON.stringify(subscription));
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        // await sendSubscriptionToServer(subscription);
        
        return subscription;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push:', error);
        return null;
    }
}

// –û—Ç–ø–∏—Å–∫–∞ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function unsubscribeFromPush() {
    try {
        const registration = await navigator.serviceWorker.ready;
        const subscription = await registration.pushManager.getSubscription();
        
        if (subscription) {
            await subscription.unsubscribe();
            localStorage.removeItem('postgo_push_subscription');
            console.log('–û—Ç–ø–∏—Å–∫–∞ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
            return true;
        }
        return false;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏:', error);
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function checkSubscriptionStatus() {
    try {
        const registration = await navigator.serviceWorker.ready;
        const subscription = await registration.pushManager.getSubscription();
        return subscription !== null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        return false;
    }
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è VAPID –∫–ª—é—á–∞
function urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
        .replace(/\-/g, '+')
        .replace(/_/g, '/');

    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);

    for (let i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function showTestNotification() {
    if (Notification.permission === 'granted') {
        const notification = new Notification('POST GO - –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', {
            body: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç POST GO',
            icon: './icons8-–∫–æ—Ä–æ–±–∫–∞-64.png',
            badge: './icons8-–∫–æ—Ä–æ–±–∫–∞-64.png',
            tag: 'test-notification',
            requireInteraction: false
        });

        notification.onclick = function() {
            window.focus();
            notification.close();
        };

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.close();
        }, 5000);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
function createNotificationButton() {
    const button = document.createElement('button');
    button.id = 'notificationToggle';
    button.className = 'btn btn-outline notification-toggle';
    button.innerHTML = 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    updateNotificationButton();
    
    button.addEventListener('click', async () => {
        if (Notification.permission === 'granted') {
            const isSubscribed = await checkSubscriptionStatus();
            if (isSubscribed) {
                await unsubscribeFromPush();
                showModal({
                    type: 'info',
                    title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã',
                    message: '–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.'
                });
            } else {
                await subscribeToPush();
                showModal({
                    type: 'success',
                    title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã',
                    message: '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö.'
                });
            }
        } else {
            const granted = await requestNotificationPermission();
            if (granted) {
                showModal({
                    type: 'success',
                    title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã',
                    message: '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö.'
                });
            } else {
                showModal({
                    type: 'warning',
                    title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã',
                    message: '–†–∞–∑—Ä–µ—à–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.'
                });
            }
        }
        updateNotificationButton();
    });
    
    return button;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function updateNotificationButton() {
    const button = document.getElementById('notificationToggle');
    if (!button) return;
    
    if (Notification.permission === 'granted') {
        const isSubscribed = await checkSubscriptionStatus();
        if (isSubscribed) {
            button.innerHTML = 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã';
            button.classList.remove('btn-outline');
            button.classList.add('btn-primary');
        } else {
            button.innerHTML = 'üîï –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';
            button.classList.remove('btn-primary');
            button.classList.add('btn-outline');
        }
    } else {
        button.innerHTML = 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';
        button.classList.remove('btn-primary');
        button.classList.add('btn-outline');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
function addNotificationButtonToUI() {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —à–∞–ø–∫—É —Å–∞–π—Ç–∞
    const nav = document.querySelector('.nav');
    if (nav && !document.getElementById('notificationToggle')) {
        const notificationBtn = createNotificationButton();
        nav.appendChild(notificationBtn);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
    const mobileNav = document.querySelector('.mobile-bottom-nav');
    if (mobileNav && !document.getElementById('mobileNotificationToggle')) {
        const mobileNotificationBtn = document.createElement('a');
        mobileNotificationBtn.id = 'mobileNotificationToggle';
        mobileNotificationBtn.className = 'mobile-nav-item';
        mobileNotificationBtn.innerHTML = '<span class="mobile-nav-icon">üîî</span>';
        mobileNotificationBtn.title = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';
        
        mobileNotificationBtn.addEventListener('click', async (e) => {
            e.preventDefault();
            if (Notification.permission === 'granted') {
                const isSubscribed = await checkSubscriptionStatus();
                if (isSubscribed) {
                    await unsubscribeFromPush();
                } else {
                    await subscribeToPush();
                }
            } else {
                await requestNotificationPermission();
            }
            updateNotificationButton();
        });
        
        mobileNav.appendChild(mobileNotificationBtn);
    }
}

// ==================== –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ====================
window.addEventListener('load', () => {
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const preloader = document.getElementById('preloader');
    if (preloader) {
        preloader.style.display = 'none';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å loaded –∫ body
    document.body.classList.add('loaded');

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è PWA
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('./sw.js')
            .then((registration) => {
                console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Service Worker
                registration.addEventListener('updatefound', () => {
                    const newWorker = registration.installing;
                    newWorker.addEventListener('statechange', () => {
                        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                            // –ù–æ–≤—ã–π Service Worker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                            showModal({
                                type: 'info',
                                title: '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
                                message: '–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ.',
                                actions: [
                                    { label: '–û–±–Ω–æ–≤–∏—Ç—å', variant: 'primary', handler: () => window.location.reload() }
                                ]
                            });
                        }
                    });
                });
            })
            .catch(console.error);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (isNotificationSupported()) {
        addNotificationButtonToUI();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        setTimeout(() => {
            updateNotificationButton();
        }, 1000);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
    window.addEventListener('beforeinstallprompt', (e) => {
        console.log('PWA –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å');
        e.preventDefault();
        deferredPrompt = e;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        showInstallButton();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    window.addEventListener('appinstalled', (evt) => {
        console.log('PWA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        showModal({
            type: 'success',
            title: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
            message: 'POST GO —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!'
        });
    });
});

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
function showInstallButton() {
    if (document.getElementById('installButton')) return;
    
    const installButton = document.createElement('button');
    installButton.id = 'installButton';
    installButton.className = 'btn btn-primary install-button';
    installButton.innerHTML = 'üì± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
    
    installButton.addEventListener('click', async () => {
        if (deferredPrompt) {
            deferredPrompt.prompt();
            const { outcome } = await deferredPrompt.userChoice;
            
            if (outcome === 'accepted') {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏–ª PWA');
            } else {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É PWA');
            }
            
            deferredPrompt = null;
            installButton.remove();
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —à–∞–ø–∫—É
    const nav = document.querySelector('.nav');
    if (nav) {
        nav.appendChild(installButton);
    }
}

// ==================== –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ====================
console.log('%cPOST GO', 'font-size: 40px; font-weight: bold; color: #0066FF;');
console.log('%c–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏', 'font-size: 16px; color: #666;');
console.log('–°–∞–π—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML, CSS –∏ JavaScript');

// ==================== –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ ====================
function showModal({ type = 'info', title = '', message = '', actions = [] }) {
    const overlay = document.createElement('div');
    overlay.className = 'modal-overlay';

    const modal = document.createElement('div');
    modal.className = `modal modal-${type}`;

    const iconMap = {
        success: '‚úî',
        error: '‚úñ',
        info: '‚Ñπ',
        warning: '‚ö†'
    };

    modal.innerHTML = `
        <div class="modal-header">
            <div class="modal-icon">${iconMap[type] || '‚Ñπ'}</div>
            <div class="modal-title">${title}</div>
        </div>
        <div class="modal-body">${message}</div>
        <div class="modal-actions"></div>
    `;

    const actionsContainer = modal.querySelector('.modal-actions');

    // –ö–Ω–æ–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultAction = { label: '–û–∫', variant: 'primary' };
    const allActions = actions.length ? actions : [defaultAction];

    allActions.forEach(({ label, variant = 'primary', handler }) => {
        const btn = document.createElement('button');
        btn.className = `btn ${variant === 'primary' ? 'btn-primary' : variant === 'dark' ? 'btn-dark' : 'btn-outline'}`;
        btn.textContent = label;
        btn.addEventListener('click', () => {
            close();
            if (typeof handler === 'function') handler();
        });
        actionsContainer.appendChild(btn);
    });

    overlay.appendChild(modal);
    document.body.appendChild(overlay);

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    requestAnimationFrame(() => overlay.classList.add('open'));

    function close() {
        overlay.classList.remove('open');
        setTimeout(() => overlay.remove(), 200);
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω –∏ –ø–æ Esc
    overlay.addEventListener('click', (e) => { if (e.target === overlay) close(); });
    document.addEventListener('keydown', function onEsc(e){ if (e.key === 'Escape'){ close(); document.removeEventListener('keydown', onEsc);} });
}

// ==================== –ö–∞–±–∏–Ω–µ—Ç: –ø—Ä–æ—Ñ–∏–ª—å, –∑–∞–∫–∞–∑—ã, –æ–ø–ª–∞—Ç–∞ ====================
function renderStatusBadge(status){
    const map = { '–ù–æ–≤—ã–π':'badge badge-new', '–û–ø–ª–∞—á–µ–Ω':'badge badge-done', '–í –ø—É—Ç–∏':'badge badge-progress', '–û—Ç–º–µ–Ω–µ–Ω':'badge badge-cancel' };
    return `<span class="${map[status]||'badge'}">${status}</span>`;
}

function formatDate(d){ try { return new Date(d).toLocaleString('ru-RU'); } catch { return d; } }
function formatByn(n){ return `${Number(n||0).toFixed(2)} BYN`; }

function updateOrder(id, patch){
    const all = getAllOrders();
    const idx = all.findIndex(o => o.id === id);
    if (idx >= 0){ all[idx] = { ...all[idx], ...patch }; setAllOrders(all); }
}

function openPaymentModal(orderId){
    const o = getAllOrders().find(x => x.id === orderId);
    if (!o){ showModal({ type:'error', title:'–û–ø–ª–∞—Ç–∞', message:'–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.'}); return; }
    const body = `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>${formatByn(o.price)}</b><br><br>
        <div class="form-row">
            <button class="btn btn-primary" id="payCloud">CloudPayments</button>
            <button class="btn btn-outline" id="payYandex">–Ø–Ω–¥–µ–∫—Å Pay</button>
            <button class="btn btn-outline" id="payStripe">Stripe</button>
        </div>`;
    showModal({ type: 'info', title: '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞', message: body, actions: [{ label: '–û—Ç–º–µ–Ω–∞', variant: 'outline' }] });
    setTimeout(() => {
        const openCardForm = (provider) => {
            const formHtml = `
                <div class="form-group"><label class="form-label">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</label>
                    <input type="text" id="cardNumber" class="form-input" placeholder="4111 1111 1111 1111" />
                </div>
                <div class="form-row">
                    <div class="form-group" style="flex:1;"><label class="form-label">MM/YY</label>
                        <input type="text" id="cardExp" class="form-input" placeholder="12/29" />
                    </div>
                    <div class="form-group" style="flex:1;"><label class="form-label">CVC</label>
                        <input type="password" id="cardCvc" class="form-input" placeholder="123" />
                    </div>
                </div>`;
            showModal({ type:'info', title:`${provider}: –û–ø–ª–∞—Ç–∞ ${formatByn(o.price)}`, message: formHtml, actions:[
                { label:'–û—Ç–º–µ–Ω–∞', variant:'outline' },
                { label:'–û–ø–ª–∞—Ç–∏—Ç—å', variant:'primary', handler:()=>{
                    const num = (document.getElementById('cardNumber')?.value||'').replace(/\s+/g,'');
                    const exp = document.getElementById('cardExp')?.value||'';
                    const cvc = document.getElementById('cardCvc')?.value||'';
                    if (num.length < 13 || !/^[0-9]{13,19}$/.test(num)) { showModal({type:'error', title:'–û—à–∏–±–∫–∞', message:'–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã'}); return; }
                    if (!/^\d{2}\/\d{2}$/.test(exp)) { showModal({type:'error', title:'–û—à–∏–±–∫–∞', message:'–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è'}); return; }
                    if (!/^\d{3,4}$/.test(cvc)) { showModal({type:'error', title:'–û—à–∏–±–∫–∞', message:'–ù–µ–≤–µ—Ä–Ω—ã–π CVC'}); return; }
                    // —ç–º—É–ª—è—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
                    setTimeout(()=>{
                        updateOrder(orderId, { status:'–û–ø–ª–∞—á–µ–Ω', paidAt:new Date().toISOString(), provider });
                        showModal({ type:'success', title:'–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞', message:`–ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}`, actions:[{label:'–ì–æ—Ç–æ–≤–æ', variant:'primary', handler:()=>location.reload()}]});
                    }, 600);
                }}
            ]});
        };
        document.getElementById('payCloud')?.addEventListener('click', () => openCardForm('CloudPayments'));
        document.getElementById('payYandex')?.addEventListener('click', () => openCardForm('Yandex Pay'));
        document.getElementById('payStripe')?.addEventListener('click', () => openCardForm('Stripe'));
    }, 0);
}

function openInvoice(orderId){
    const all = getAllOrders();
    const o = all.find(x => x.id === orderId);
    if (!o){ showModal({ type: 'error', title: '–°—á–µ—Ç', message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.' }); return; }
    const user = getSessionUser() || { name: '–ì–æ—Å—Ç—å', phone: '‚Äî' };
    const html = `<!doctype html><html lang="ru"><head><meta charset="utf-8"><title>–°—á–µ—Ç ${o.id}</title>
    <style>body{font-family:Segoe UI,Arial,sans-serif;padding:24px;} h1{margin:0 0 10px} table{width:100%;border-collapse:collapse;margin-top:16px} td,th{border:1px solid #ddd;padding:8px;text-align:left} .right{text-align:right}</style>
    </head><body>
    <h1>–°—á–µ—Ç / –ê–∫—Ç ‚Ññ ${o.id}</h1>
    <div>–ö–ª–∏–µ–Ω—Ç: ${user.name} ¬∑ –¢–µ–ª: ${user.phone}</div>
    <div>–î–∞—Ç–∞: ${formatDate(o.createdAt)}</div>
    <table>
        <thead><tr><th>–£—Å–ª—É–≥–∞</th><th>–ö–æ–ª-–≤–æ</th><th>–¶–µ–Ω–∞</th><th>–°—É–º–º–∞</th></tr></thead>
        <tbody>
            <tr><td>${o.deliveryType} ‚Äî ${o.cargoType} (–≤–µ—Å ${o.weight} –∫–≥, –æ–±—ä–µ–º ${o.volume} –º¬≥)</td><td>1</td><td class="right">${formatByn(o.price)}</td><td class="right">${formatByn(o.price)}</td></tr>
        </tbody>
        <tfoot><tr><th colspan="3" class="right">–ò—Ç–æ–≥–æ</th><th class="right">${formatByn(o.price)}</th></tr></tfoot>
    </table>
    <p>–ü–æ–¥–ø–∏—Å–∏ —Å—Ç–æ—Ä–æ–Ω: _____________ / _____________</p>
    <script>window.onload=()=>{window.print();}</script>
    </body></html>`;
    const w = window.open('', '_blank');
    w.document.write(html);
    w.document.close();
}

function renderAccount(){
    if (!document.querySelector('.account-tabs')) return;
    const user = getSessionUser();
    if (!user){
        showModal({ type: 'info', title: '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥', message: '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–∞–±–∏–Ω–µ—Ç.', actions: [{ label: '–í–æ–π—Ç–∏', variant: 'primary', handler: () => window.location.href = 'auth.html' }] });
        return;
    }

    // –í–∫–ª–∞–¥–∫–∏ –∫–∞–±–∏–Ω–µ—Ç–∞
    const accTabs = document.querySelectorAll('[data-account-tab]');
    const sections = {
        profile: document.getElementById('accountProfile'),
        orders: document.getElementById('accountOrders'),
        payments: document.getElementById('accountPayments'),
        notifications: document.getElementById('accountNotifications')
    };
    accTabs.forEach(t => t.addEventListener('click', () => {
        accTabs.forEach(x => x.classList.remove('active'));
        t.classList.add('active');
        const key = t.getAttribute('data-account-tab');
        Object.keys(sections).forEach(k => sections[k].style.display = k === key ? 'block' : 'none');
    }));

    // –ü—Ä–æ—Ñ–∏–ª—å
    const accName = document.getElementById('accName');
    const accPhone = document.getElementById('accPhone');
    if (accName) accName.value = user.name || '';
    if (accPhone) accPhone.value = user.phone || '';

    const profileForm = document.getElementById('profileForm');
    profileForm?.addEventListener('submit', (e) => {
        e.preventDefault();
        const name = accName.value.trim();
        const phone = accPhone.value.trim();
        if (!name || !phone){ showModal({ type:'error', title:'–û—à–∏–±–∫–∞', message:'–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.'}); return; }
        localStorage.setItem('postgo_session_user', JSON.stringify({ ...user, name, phone }));
        showModal({ type:'success', title:'–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ', message:'–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω.'});
    });
    document.getElementById('btnLogout')?.addEventListener('click', () => {
        showModal({ type:'warning', title:'–í—ã—Ö–æ–¥', message:'–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?', actions:[{label:'–û—Ç–º–µ–Ω–∞', variant:'outline'},{label:'–í—ã–π—Ç–∏', variant:'primary', handler:()=>{ localStorage.removeItem('postgo_session_user'); window.location.href='index.html'; }}]});
    });
    document.getElementById('btnDeleteAcc')?.addEventListener('click', () => {
        showModal({ type:'error', title:'–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞', message:'–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', actions:[{label:'–û—Ç–º–µ–Ω–∞', variant:'outline'},{label:'–£–¥–∞–ª–∏—Ç—å', variant:'dark', handler:()=>{ localStorage.clear(); window.location.href='index.html'; }}]});
    });

    // –ê–¥—Ä–µ—Å–∞
    const addrKey = 'postgo_addresses_v1';
    const getAddrs = ()=>{ try { return JSON.parse(localStorage.getItem(addrKey))||[]; } catch { return []; } };
    const setAddrs = (v)=> localStorage.setItem(addrKey, JSON.stringify(v));
    const renderAddrs = ()=>{
        const tb = document.querySelector('#addressesTable tbody'); if (!tb) return;
        tb.innerHTML='';
        getAddrs().forEach((a,i)=>{
            const tr = document.createElement('tr');
            tr.innerHTML = `<td>${i+1}</td><td>${a.from}</td><td>${a.to}</td><td><button class="btn btn-outline" data-del="${i}">–£–¥–∞–ª–∏—Ç—å</button></td>`;
            tb.appendChild(tr);
        });
    };
    document.getElementById('addressForm')?.addEventListener('submit', (e)=>{
        e.preventDefault();
        const from = document.getElementById('addrFrom').value.trim();
        const to = document.getElementById('addrTo').value.trim();
        if(!from || !to){ showModal({type:'error', title:'–û—à–∏–±–∫–∞', message:'–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å–∞.'}); return; }
        const arr = getAddrs(); arr.push({ from, to }); setAddrs(arr);
        document.getElementById('addrFrom').value=''; document.getElementById('addrTo').value='';
        renderAddrs();
    });
    document.getElementById('addressesTable')?.addEventListener('click', (e)=>{
        const btn = e.target.closest('button[data-del]'); if(!btn) return;
        const idx = Number(btn.getAttribute('data-del'));
        const arr = getAddrs(); arr.splice(idx,1); setAddrs(arr); renderAddrs();
    });
    renderAddrs();

    // –ó–∞–∫–∞–∑—ã
    const tbody = document.querySelector('#ordersTable tbody');
    const summary = document.getElementById('accountSummary');
    if (tbody){
        const all = getAllOrders().filter(o => o.userPhone === user.phone);
        tbody.innerHTML = '';
        let total = 0;
        all.forEach((o, idx) => {
            total += o.price || 0;
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${idx+1}</td>
                <td>${formatDate(o.createdAt)}</td>
                <td>${o.deliveryType}</td>
                <td>${o.cargoType}</td>
                <td>${o.weight}</td>
                <td>${o.volume}</td>
                <td>${formatByn(o.price)}</td>
                <td>${renderStatusBadge(o.status)}</td>
                <td>
                    <button class="btn btn-primary" data-action="pay" data-id="${o.id}">–û–ø–ª–∞—Ç–∏—Ç—å</button>
                    <button class="btn btn-outline" data-action="invoice" data-id="${o.id}">–°—á–µ—Ç</button>
                    <button class="btn btn-outline" data-action="cancel" data-id="${o.id}">–û—Ç–º–µ–Ω–∞</button>
                </td>`;
            tbody.appendChild(tr);
        });
        if (summary) summary.textContent = `–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${all.length} ¬∑ –ù–∞ —Å—É–º–º—É: ${formatByn(total)}`;

        document.getElementById('ordersTable')?.addEventListener('click', (e) => {
            const btn = e.target.closest('button[data-action]');
            if (!btn) return;
            const id = btn.getAttribute('data-id');
            const action = btn.getAttribute('data-action');
            if (action === 'pay') openPaymentModal(id);
            if (action === 'invoice') openInvoice(id);
            if (action === 'cancel') {
                showModal({ type:'warning', title:'–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', message:'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞.', actions:[{label:'–ù–µ—Ç', variant:'outline'},{label:'–î–∞', variant:'primary', handler:()=>{ updateOrder(id, { status:'–û—Ç–º–µ–Ω–µ–Ω' }); location.reload(); }}]});
            }
        });
    }

    // –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã (–º–æ–∫)
    const payKey = 'postgo_payments_v1';
    const getPays = ()=>{ try { return JSON.parse(localStorage.getItem(payKey))||[]; } catch { return []; } };
    const setPays = (v)=> localStorage.setItem(payKey, JSON.stringify(v));
    const renderPays = ()=>{
        const tb = document.querySelector('#paymentsTable tbody'); if(!tb) return;
        tb.innerHTML='';
        getPays().forEach((p,i)=>{
            const tr = document.createElement('tr');
            tr.innerHTML = `<td>${i+1}</td><td>${p.provider}</td><td>${p.label||''}</td><td><button class=\"btn btn-outline\" data-rm=\"${i}\">–£–¥–∞–ª–∏—Ç—å</button></td>`;
            tb.appendChild(tr);
        });
    };
    document.getElementById('paymentForm')?.addEventListener('submit', (e)=>{
        e.preventDefault();
        const provider = document.getElementById('payProvider').value;
        const label = document.getElementById('payLabel').value.trim();
        const arr = getPays(); arr.push({ provider, label }); setPays(arr);
        document.getElementById('payLabel').value='';
        renderPays();
    });
    document.getElementById('paymentsTable')?.addEventListener('click', (e)=>{
        const btn = e.target.closest('button[data-rm]'); if(!btn) return;
        const idx = Number(btn.getAttribute('data-rm'));
        const arr = getPays(); arr.splice(idx,1); setPays(arr); renderPays();
    });
    renderPays();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    initNotificationSection();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
function initNotificationSection() {
    const notificationToggleBtn = document.getElementById('notificationToggleBtn');
    const testNotificationBtn = document.getElementById('testNotificationBtn');
    const notificationStatusText = document.getElementById('notificationStatusText');
    
    if (!notificationToggleBtn || !testNotificationBtn || !notificationStatusText) return;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async function updateNotificationStatus() {
        if (!isNotificationSupported()) {
            notificationStatusText.textContent = 'Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ';
            notificationToggleBtn.textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
            notificationToggleBtn.disabled = true;
            return;
        }

        const permission = Notification.permission;
        const isSubscribed = await checkSubscriptionStatus();

        if (permission === 'granted' && isSubscribed) {
            notificationStatusText.textContent = '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã';
            notificationToggleBtn.textContent = '–û—Ç–∫–ª—é—á–∏—Ç—å';
            notificationToggleBtn.className = 'btn btn-outline';
            testNotificationBtn.disabled = false;
        } else if (permission === 'granted' && !isSubscribed) {
            notificationStatusText.textContent = '‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω—ã, –Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã';
            notificationToggleBtn.textContent = '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è';
            notificationToggleBtn.className = 'btn btn-primary';
            testNotificationBtn.disabled = false;
        } else if (permission === 'denied') {
            notificationStatusText.textContent = '‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã';
            notificationToggleBtn.textContent = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã';
            notificationToggleBtn.disabled = true;
            testNotificationBtn.disabled = true;
        } else {
            notificationStatusText.textContent = '‚ùì –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–æ';
            notificationToggleBtn.textContent = '–í–∫–ª—é—á–∏—Ç—å';
            notificationToggleBtn.className = 'btn btn-primary';
            testNotificationBtn.disabled = true;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notificationToggleBtn.addEventListener('click', async () => {
        if (Notification.permission === 'granted') {
            const isSubscribed = await checkSubscriptionStatus();
            if (isSubscribed) {
                await unsubscribeFromPush();
                showModal({
                    type: 'info',
                    title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã',
                    message: '–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.'
                });
            } else {
                await subscribeToPush();
                showModal({
                    type: 'success',
                    title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã',
                    message: '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö.'
                });
            }
        } else {
            const granted = await requestNotificationPermission();
            if (granted) {
                showModal({
                    type: 'success',
                    title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã',
                    message: '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö.'
                });
            } else {
                showModal({
                    type: 'warning',
                    title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã',
                    message: '–†–∞–∑—Ä–µ—à–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.'
                });
            }
        }
        updateNotificationStatus();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    testNotificationBtn.addEventListener('click', () => {
        if (Notification.permission === 'granted') {
            showTestNotification();
            showModal({
                type: 'success',
                title: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.'
            });
        } else {
            showModal({
                type: 'warning',
                title: '–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è',
                message: '–°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.'
            });
        }
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationCheckboxes = document.querySelectorAll('#accountNotifications input[type="checkbox"]');
    notificationCheckboxes.forEach(checkbox => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const savedSettings = JSON.parse(localStorage.getItem('postgo_notification_settings') || '{}');
        checkbox.checked = savedSettings[checkbox.id] !== false;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        checkbox.addEventListener('change', () => {
            const settings = JSON.parse(localStorage.getItem('postgo_notification_settings') || '{}');
            settings[checkbox.id] = checkbox.checked;
            localStorage.setItem('postgo_notification_settings', JSON.stringify(settings));
        });
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateNotificationStatus();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞
renderAccount();

