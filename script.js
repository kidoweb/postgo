// ==================== –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é ====================
const mobileMenuBtn = document.getElementById('mobileMenuBtn');
const navMenu = document.querySelector('.nav-menu');

if (mobileMenuBtn) {
    mobileMenuBtn.addEventListener('click', () => {
        navMenu.classList.toggle('active');
        mobileMenuBtn.classList.toggle('active');
    });
}

// ==================== –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ ====================
const trackingBtn = document.getElementById('trackingBtn');
const trackingInput = document.getElementById('trackingInput');
const trackingEmpty = document.getElementById('trackingEmpty');
const trackingResult = document.getElementById('trackingResult');

if (trackingBtn && trackingInput) {
    trackingBtn.addEventListener('click', () => {
        const trackingNumber = trackingInput.value.trim();
        
        if (trackingNumber) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            if (trackingEmpty) trackingEmpty.style.display = 'none';
            if (trackingResult) trackingResult.style.display = 'block';
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            trackingResult.style.opacity = '0';
            setTimeout(() => {
                trackingResult.style.opacity = '1';
                trackingResult.style.transition = 'opacity 0.5s ease';
            }, 100);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∏—Å–∫–µ
            if (typeof ymaps !== 'undefined' && !window.__ymapInited) {
                ymaps.ready(initYMap);
            }
        } else {
            showModal({
                type: 'error',
                title: '–ù—É–∂–µ–Ω –Ω–æ–º–µ—Ä',
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.'
            });
        }
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é Enter
    trackingInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            trackingBtn.click();
        }
    });
}

// ==================== –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞ ====================
function initYMap() {
    const mapContainer = document.getElementById('yandexMap');
    if (!mapContainer) return;

    // –ú–∏–Ω—Å–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const startCoords = [53.902284, 27.561831];
    const endCoords = [53.907, 27.58];

    const map = new ymaps.Map('yandexMap', {
        center: startCoords,
        zoom: 12,
        controls: ['zoomControl', 'geolocationControl']
    });

    // –ú–µ—Ç–∫–∏
    const startPlacemark = new ymaps.Placemark(startCoords, {
        balloonContent: '–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
    }, {
        preset: 'islands#redDotIcon'
    });

    const endPlacemark = new ymaps.Placemark(endCoords, {
        balloonContent: '–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'
    }, {
        preset: 'islands#blueDotIcon'
    });

    map.geoObjects.add(startPlacemark).add(endPlacemark);

    // –ú–∞—Ä—à—Ä—É—Ç
    ymaps.route([startCoords, endCoords]).then(function(route) {
        route.getPaths().options.set({
            strokeColor: '#0066FF',
            opacity: 0.9,
            strokeWidth: 4
        });
        map.geoObjects.add(route);
        map.setBounds(route.getBounds(), { checkZoomRange: true, zoomMargin: 40 });
    });

    window.__ymapInited = true;
}

// ==================== –ê–∫–∫–∞—É–Ω—Ç: –≤–∫–ª–∞–¥–∫–∏ ====================
const authTabs = document.querySelectorAll('.auth-tab');
const loginForm = document.getElementById('loginForm');
const registerForm = document.getElementById('registerForm');
const resetForm = document.getElementById('resetForm');

authTabs.forEach(tab => {
    tab.addEventListener('click', () => {
        authTabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        const key = tab.getAttribute('data-auth-tab');
        loginForm.style.display = key === 'login' ? 'flex' : 'none';
        registerForm.style.display = key === 'register' ? 'flex' : 'none';
        resetForm.style.display = key === 'reset' ? 'flex' : 'none';
    });
});

// ==================== –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–æ–ª—è ====================
document.querySelectorAll('.password-toggle').forEach(btn => {
    btn.addEventListener('click', () => {
        const targetId = btn.getAttribute('data-target');
        const input = document.getElementById(targetId);
        if (!input) return;
        const isPass = input.type === 'password';
        input.type = isPass ? 'text' : 'password';
        btn.textContent = isPass ? 'üôà' : 'üëÅ';
    });
});

// ==================== –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–¥–µ–º–æ) ====================
const storageKey = 'postgo_users_v1';
function getUsers(){ try { return JSON.parse(localStorage.getItem(storageKey)) || []; } catch { return []; } }
function setUsers(users){ localStorage.setItem(storageKey, JSON.stringify(users)); }
function findUserByPhone(phone){ return getUsers().find(u => u.phone === phone); }

// ==================== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ====================
if (registerForm) {
    registerForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const name = document.getElementById('regName').value.trim();
        const phone = document.getElementById('regPhone').value.trim();
        const password = document.getElementById('regPassword').value;
        const confirm = document.getElementById('regConfirm').value;

        if (!name || !phone || !password || !confirm) {
            showModal({ type: 'error', title: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.' });
            return;
        }
        if (password.length < 6) {
            showModal({ type: 'warning', title: '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å', message: '–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.' });
            return;
        }
        if (password !== confirm) {
            showModal({ type: 'error', title: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', message: '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è.' });
            return;
        }
        if (findUserByPhone(phone)) {
            showModal({ type: 'warning', title: '–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –µ—Å—Ç—å', message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.' });
            return;
        }

        const users = getUsers();
        users.push({ name, phone, password });
        setUsers(users);

        showModal({
            type: 'success',
            title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
            message: `${name}, –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏.`,
            actions: [{ label: '–í–æ–π—Ç–∏', variant: 'primary', handler: () => {
                document.querySelector('[data-auth-tab="login"]').click();
                document.getElementById('loginPhone').value = phone;
            }}]
        });
    });
}

// ==================== –í—Ö–æ–¥ ====================
if (loginForm) {
    loginForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const phone = document.getElementById('loginPhone').value.trim();
        const password = document.getElementById('loginPassword').value;

        if (!phone || !password) {
            showModal({ type: 'error', title: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', message: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–∞—Ä–æ–ª—å.' });
            return;
        }
        const user = findUserByPhone(phone);
        if (!user || user.password !== password) {
            showModal({ type: 'error', title: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–∞—Ä–æ–ª—å.' });
            return;
        }

        localStorage.setItem('postgo_session_user', JSON.stringify({ name: user.name, phone: user.phone }));
        showModal({ type: 'success', title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', message: `${user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏.`, actions: [{ label: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', variant: 'primary', handler: () => window.location.href = 'index.html' }] });
    });
}

// ==================== –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–¥–µ–º–æ) ====================
if (resetForm) {
    resetForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const phone = document.getElementById('resetPhone').value.trim();
        if (!phone) {
            showModal({ type: 'error', title: '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', message: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.' });
            return;
        }
        const user = findUserByPhone(phone);
        if (!user) {
            showModal({ type: 'warning', title: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.' });
            return;
        }

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: "–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥"
        const code = Math.floor(100000 + Math.random() * 900000);
        sessionStorage.setItem('postgo_reset_code', String(code));
        showModal({
            type: 'info',
            title: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            message: `–ö–æ–¥ –¥–ª—è ${phone}: <b>${code}</b>. –ù–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\" –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è.`,
            actions: [
                { label: '–û—Ç–º–µ–Ω–∞', variant: 'outline' },
                { label: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', variant: 'primary', handler: () => promptNewPassword(phone) }
            ]
        });
    });
}

function promptNewPassword(phone) {
    const wrapper = document.createElement('div');
    wrapper.innerHTML = `
        <div class="form-group" style="margin-top:10px;">
            <label class="form-label">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
            <input type="password" id="__newPass" class="form-input" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" />
        </div>
        <div class="form-group" style="margin-top:10px;">
            <label class="form-label">–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
            <input type="password" id="__newPass2" class="form-input" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" />
        </div>
    `;

    showModal({
        type: 'info',
        title: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è',
        message: wrapper.innerHTML,
        actions: [
            { label: '–û—Ç–º–µ–Ω–∞', variant: 'outline' },
            { label: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', variant: 'primary', handler: () => {
                const p1 = document.getElementById('__newPass').value;
                const p2 = document.getElementById('__newPass2').value;
                if (!p1 || !p2) { showModal({ type: 'error', title: '–û—à–∏–±–∫–∞', message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è.' }); return; }
                if (p1.length < 6) { showModal({ type: 'warning', title: '–ö–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å', message: '–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.' }); return; }
                if (p1 !== p2) { showModal({ type: 'error', title: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', message: '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.' }); return; }

                const users = getUsers().map(u => u.phone === phone ? { ...u, password: p1 } : u);
                setUsers(users);
                showModal({ type: 'success', title: '–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω', message: '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.', actions: [{ label: '–í–æ–π—Ç–∏', variant: 'primary', handler: () => document.querySelector('[data-auth-tab="login"]').click() }] });
            }}
        ]
    });
}

// ==================== –ú–∞—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +375(xx)xxx-xx-xx ====================
function formatBYPhone(value){
    // –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    const digits = value.replace(/\D/g, '');
    // –Ω–∞—á–∏–Ω–∞–µ–º —Å 375
    let res = '+375(';
    // –æ–∂–∏–¥–∞–µ–º: 2 —Ü–∏—Ñ—Ä—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, 3, 2, 2
    const a = digits.slice(3,5); // –∫–æ–¥ –ø–æ—Å–ª–µ 375
    const b = digits.slice(5,8);
    const c = digits.slice(8,10);
    const d = digits.slice(10,12);
    if (digits.startsWith('375')) {
        if (a) res += a;
        if (a.length >= 2) res += ')';
        else return res;
        if (b) res += b;
        if (b.length >= 3) res += '-';
        else return res;
        if (c) res += c;
        if (c.length >= 2) res += '-';
        else return res;
        if (d) res += d;
        return res;
    } else {
        // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —Å 375 ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const num = digits.replace(/^375?/, '');
        const op = num.slice(0,2);
        const p1 = num.slice(2,5);
        const p2 = num.slice(5,7);
        const p3 = num.slice(7,9);
        res += op;
        if (op.length >= 2) res += ')';
        if (p1) res += p1;
        if (p1.length >= 3) res += '-';
        if (p2) res += p2;
        if (p2.length >= 2) res += '-';
        if (p3) res += p3;
        return res;
    }
}

document.querySelectorAll('.phone-input').forEach((input) => {
    input.placeholder = '+375(xx)xxx-xx-xx';
    input.addEventListener('input', (e) => {
        const pos = e.target.selectionStart;
        e.target.value = formatBYPhone(e.target.value);
        // —É–ø—Ä–æ—â–µ–Ω–Ω–æ: —Å—Ç–∞–≤–∏–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü
        e.target.setSelectionRange(e.target.value.length, e.target.value.length);
    });
    input.addEventListener('focus', (e) => {
        if (!e.target.value) e.target.value = '+375(';
    });
    input.addEventListener('blur', (e) => {
        if (e.target.value === '+375(') e.target.value = '';
    });
});

// ==================== –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ ====================
const orderForm = document.getElementById('orderForm');

if (orderForm) {
    orderForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const cargoType = document.getElementById('cargoType').value;
        const weight = document.getElementById('weight').value;
        const volume = document.getElementById('volume').value;
        const deliveryDate = document.getElementById('deliveryDate').value;
        
        if (!cargoType || !weight || !volume || !deliveryDate) {
            showModal({ type: 'error', title: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.' });
            return;
        }
        
        // –£—Å–ø–µ—à–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        showModal({ type: 'success', title: '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω', message: '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.' });
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        const trackingNumber = 'TRK-' + Math.floor(Math.random() * 10000) + '-' + 
                               Math.random().toString(36).substring(2, 6).toUpperCase();
        
        showModal({
            type: 'info',
            title: '–ù–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
            message: `–í–∞—à —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä: <b>${trackingNumber}</b>`,
            actions: [
                { label: '–ö —Ç—Ä–µ–∫–∏–Ω–≥—É', variant: 'primary', handler: () => window.location.href = 'tracking.html' },
                { label: '–ó–∞–∫—Ä—ã—Ç—å', variant: 'outline' }
            ]
        });
    });
}

// ==================== –¢–∞–±—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞ ====================
const orderTabs = document.querySelectorAll('.order-tab');

orderTabs.forEach(tab => {
    tab.addEventListener('click', () => {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤
        orderTabs.forEach(t => t.classList.remove('active'));
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–∞–±—É
        tab.classList.add('active');
        
        const tabName = tab.getAttribute('data-tab');
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (tabName === 'calculator') {
            showModal({ type: 'info', title: '–°–∫–æ—Ä–æ', message: '–§—É–Ω–∫—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.' });
        }
    });
});

// ==================== –§–∏–ª—å—Ç—Ä—ã —É—Å–ª—É–≥ ====================
const filterTabs = document.querySelectorAll('.filter-tab');
const serviceCards = document.querySelectorAll('.service-card');

filterTabs.forEach(tab => {
    tab.addEventListener('click', () => {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filterTabs.forEach(t => t.classList.remove('active'));
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É
        tab.classList.add('active');
        
        const filterText = tab.textContent.toLowerCase();
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
        serviceCards.forEach(card => {
            if (filterText === '–≤—Å–µ') {
                card.style.display = 'flex';
            } else {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                card.style.display = 'flex';
            }
        });
    });
});

// ==================== –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ ====================
const deliveryOptions = document.querySelectorAll('.delivery-option button, .delivery-option-card button');

deliveryOptions.forEach((button, index) => {
    button.addEventListener('click', () => {
        const deliveryCard = button.closest('.delivery-option, .delivery-option-card');
        const deliveryTitle = deliveryCard.querySelector('h3').textContent;
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É –≤—Å–µ—Ö –æ–ø—Ü–∏–π
        deliveryOptions.forEach(btn => {
            btn.textContent = '–í—ã–±—Ä–∞—Ç—å';
            btn.classList.remove('btn-primary');
            btn.classList.add('btn-outline');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
        button.textContent = '–í—ã–±—Ä–∞–Ω–æ';
        button.classList.remove('btn-outline');
        button.classList.add('btn-primary');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏" –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞
        const deliveryTypeInput = document.getElementById('deliveryType');
        if (deliveryTypeInput) {
            deliveryTypeInput.value = deliveryTitle;
        }
    });
});

// ==================== –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ ====================
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -100px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
        }
    });
}, observerOptions);

// –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å–ª—É–≥
document.querySelectorAll('.service-card, .hero-card, .delivery-option, .delivery-option-card').forEach(card => {
    card.style.opacity = '0';
    card.style.transform = 'translateY(30px)';
    card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
    observer.observe(card);
});

// ==================== –ü–æ–∏—Å–∫ —É—Å–ª—É–≥ ====================
const searchInputs = document.querySelectorAll('.search-input');

searchInputs.forEach(searchInput => {
    searchInput.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();
        
        serviceCards.forEach(card => {
            const title = card.querySelector('.service-title').textContent.toLowerCase();
            const description = card.querySelector('.service-description').textContent.toLowerCase();
            
            if (title.includes(searchTerm) || description.includes(searchTerm)) {
                card.style.display = 'flex';
            } else {
                card.style.display = 'none';
            }
        });
    });
});

// ==================== –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –¥–ª—è —è–∫–æ—Ä–µ–π ====================
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// ==================== –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ====================
const phoneInput = document.getElementById('phone');

if (phoneInput) {
    phoneInput.addEventListener('input', (e) => {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã +, -, (, )
        e.target.value = e.target.value.replace(/[^\d\+\-\(\)\s]/g, '');
    });
}

// ==================== –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º ====================
const deliveryDateInput = document.getElementById('deliveryDate');

if (deliveryDateInput) {
    const today = new Date().toISOString().split('T')[0];
    deliveryDateInput.setAttribute('min', today);
}

// ==================== –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ====================
const trackingExampleInput = document.querySelector('.tracking-example-input');

if (trackingExampleInput) {
    trackingExampleInput.addEventListener('click', () => {
        if (trackingInput) {
            trackingInput.value = trackingExampleInput.placeholder.replace('–ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞: ', '');
            trackingInput.focus();
        }
    });
}

// ==================== –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ====================
window.addEventListener('load', () => {
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const preloader = document.getElementById('preloader');
    if (preloader) {
        preloader.style.display = 'none';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å loaded –∫ body
    document.body.classList.add('loaded');

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è PWA
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('./sw.js').catch(console.error);
    }
});

// ==================== –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ====================
console.log('%cPOST GO', 'font-size: 40px; font-weight: bold; color: #0066FF;');
console.log('%c–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏', 'font-size: 16px; color: #666;');
console.log('–°–∞–π—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML, CSS –∏ JavaScript');

// ==================== –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ ====================
function showModal({ type = 'info', title = '', message = '', actions = [] }) {
    const overlay = document.createElement('div');
    overlay.className = 'modal-overlay';

    const modal = document.createElement('div');
    modal.className = `modal modal-${type}`;

    const iconMap = {
        success: '‚úî',
        error: '‚úñ',
        info: '‚Ñπ',
        warning: '‚ö†'
    };

    modal.innerHTML = `
        <div class="modal-header">
            <div class="modal-icon">${iconMap[type] || '‚Ñπ'}</div>
            <div class="modal-title">${title}</div>
        </div>
        <div class="modal-body">${message}</div>
        <div class="modal-actions"></div>
    `;

    const actionsContainer = modal.querySelector('.modal-actions');

    // –ö–Ω–æ–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultAction = { label: '–û–∫', variant: 'primary' };
    const allActions = actions.length ? actions : [defaultAction];

    allActions.forEach(({ label, variant = 'primary', handler }) => {
        const btn = document.createElement('button');
        btn.className = `btn ${variant === 'primary' ? 'btn-primary' : variant === 'dark' ? 'btn-dark' : 'btn-outline'}`;
        btn.textContent = label;
        btn.addEventListener('click', () => {
            close();
            if (typeof handler === 'function') handler();
        });
        actionsContainer.appendChild(btn);
    });

    overlay.appendChild(modal);
    document.body.appendChild(overlay);

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    requestAnimationFrame(() => overlay.classList.add('open'));

    function close() {
        overlay.classList.remove('open');
        setTimeout(() => overlay.remove(), 200);
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω –∏ –ø–æ Esc
    overlay.addEventListener('click', (e) => { if (e.target === overlay) close(); });
    document.addEventListener('keydown', function onEsc(e){ if (e.key === 'Escape'){ close(); document.removeEventListener('keydown', onEsc);} });
}

